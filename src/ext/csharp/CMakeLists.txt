# Build a C# Shared library using SWIG


set(CMAKE_SWIG_OUTDIR ${CMAKE_CURRENT_SOURCE_DIR}/src)


add_custom_target(csharp_lib)
set_target_properties(csharp_lib PROPERTIES EXCLUDE_FROM_ALL 1 EXCLUDE_FROM_DEFAULT_BUILD 1)

foreach(SRC ${SWIG_SRCS})
    get_filename_component(MODULE ${SRC} NAME_WE)
    string(SUBSTRING ${MODULE} 0 1 FIRST_LETTER)
    string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)
    string(REGEX REPLACE "^.(.*)" "${FIRST_LETTER}\\1" NAMESPACE "${MODULE}")
    set_source_files_properties(${SRC} PROPERTIES SWIG_FLAGS "-namespace;Illumina.InterOp.${NAMESPACE};-module;c_csharp_${MODULE}${SWIG_WORDSIZE_FLAG}")
    set_source_files_properties(${SRC} PROPERTIES CPLUSPLUS ON)
    set(SWIG_MODULE_c_csharp_${MODULE}_EXTRA_DEPS ${SWIG_DEPS} )
    swig_add_module(c_csharp_${MODULE} csharp ${SRC})
    set(SWIG_MODULE ${SWIG_MODULE_c_csharp_${MODULE}_REAL_NAME})
    set(EXTRA_LINKER_FLAGS)
    if(MINGW)
        set(EXTRA_LINKER_FLAGS "-Wl,-add-stdcall-alias")
        get_target_property(existing_link_flags ${SWIG_MODULE} LINK_FLAGS)
        if(existing_link_flags)
            set(EXTRA_LINKER_FLAGS "${existing_link_flags} ${EXTRA_LINKER_FLAGS}")
        endif()
        set_target_properties(${SWIG_MODULE} PROPERTIES LINK_FLAGS "${EXTRA_LINKER_FLAGS}")
    endif()
    if(MSVC)
        set_target_properties(${SWIG_MODULE} PROPERTIES COMPILE_FLAGS "/bigobj /wd4100 -D_CRT_SECURE_NO_WARNINGS  -D_SCL_SECURE_NO_WARNINGS")
    elseif(MINGW)
        set_target_properties(${SWIG_MODULE} PROPERTIES COMPILE_FLAGS "-Wa,-mbig-obj -Wno-unused-function -Wno-unused-parameter")
    elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang" OR CMAKE_COMPILER_IS_GNUCC)
        set_target_properties(${SWIG_MODULE} PROPERTIES COMPILE_FLAGS "-Wno-unused-function -Wno-unused-parameter")
    endif()
    swig_link_libraries(${SWIG_MODULE} ${INTEROP_DL_LIB})

    if(WIN32)
        set_target_properties(${SWIG_MODULE} PROPERTIES PREFIX "")
    endif()
    add_dependencies(${SWIG_MODULE} ${INTEROP_LIB})

    if(NOT ENABLE_STATIC)
        add_custom_command(TARGET ${SWIG_MODULE} POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE_DIR:${INTEROP_LIB}> ${CMAKE_CURRENT_BINARY_DIR})
    endif()
    list(APPEND SWIG_MODULE_LIST ${SWIG_MODULE})
    add_dependencies(csharp_lib ${SWIG_MODULE})
endforeach()



find_package(CSharp)

if(NOT CSHARP_FOUND)
    message(WARNING "C# compiler not found, unable to generate C# binding library")
    return()
endif()

include(${CSHARP_USE_FILE})

set(SWIG_GEN_CSHARP_SOURCE_FILES ${CMAKE_SWIG_OUTDIR}/*.cs CACHE INTERNAL "C# source files generated by SWIG" FORCE)

csharp_add_library(csharp_interop ${CMAKE_SWIG_OUTDIR}/*.cs)
add_dependencies(csharp_interop ${SWIG_MODULE_LIST})
foreach(SRC ${SWIG_SRCS})
    get_filename_component(MODULE ${SRC} NAME_WE)
    add_custom_command(
            TARGET csharp_interop
            POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:${SWIG_MODULE_c_csharp_${MODULE}_REAL_NAME}> $<TARGET_FILE_DIR:${INTEROP_LIB}>
            COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CSHARP_csharp_interop_BINARY} $<TARGET_FILE_DIR:${INTEROP_LIB}>
            COMMENT "copy ${CSHARP_csharp_interop_BINARY} $<TARGET_FILE_DIR:${INTEROP_LIB}>"
    )
endforeach()

if(ENABLE_EXAMPLES)
    foreach(SRC ${SWIG_SRCS})
        get_filename_component(MODULE ${SRC} NAME_WE)
        install(TARGETS ${SWIG_MODULE_c_csharp_${MODULE}_REAL_NAME} LIBRARY DESTINATION share/illumina/interop/examples)
    endforeach()
    install(FILES ${CSHARP_csharp_interop_BINARY} DESTINATION share/illumina/interop/examples)
endif()

foreach(SRC ${SWIG_SRCS})
    get_filename_component(MODULE ${SRC} NAME_WE)
    install(TARGETS ${SWIG_MODULE_c_csharp_${MODULE}_REAL_NAME} LIBRARY DESTINATION lib64)
endforeach()
install(FILES ${CSHARP_csharp_interop_BINARY}
        DESTINATION lib64
        )
